'use strict';

var utils = require('../utils');
var log = require('npmlog');

module.exports = function (http, api, ctx) {
  return function getAccess(callback) {
    var cb;
    var rtPromise = new Promise(function (resolve, reject) {
      cb = function (err, token) {
        token ? resolve(token) : reject(err);
      }
    });

    if (typeof callback == 'function') cb = callback;
    if (ctx.access_token != 'NONE') cb(null, ctx.access_token);
    else {
      var lsd;
      var pageURL = 'https://business.facebook.com/';
      var Referer = pageURL + 'security/twofactor/reauth/?twofac_next=' + encodeURIComponent(pageURL + 'business_locations') + '&type=avoid_bypass&app_id=0&save_device=0';
    
      http
        .get(pageURL + 'business_locations', ctx.jar)
        .then(utils.parseAndCheckLogin(ctx, http))
        .then(function (html) {
          var token = /"],\["(\S+)","436761779744620",{/g.exec(html);
          if (token) {
            ctx.access_token = token[1].split('"],["').pop();
            return cb(null, token[1].split('"],["').pop());
          }
          lsd = utils.getFrom(String(html), "[\"LSD\",[],{\"token\":\"", "\"}");
          return http
            .post(pageURL + 'security/twofactor/reauth/send/', ctx.jar, { lsd }, null, null, { Referer });
        })
        .then(function () {
          if (typeof callback != 'function') 
            throw new Error('callback is not a function');
          throw {
            error: 'submitCode',
            continue: function submitCode(code = '') {
              var pCb;
              var prtPromise = new Promise(function (resolve) {
                pCb = (error, token) => resolve(cb(error, token));
              });
              var form = {
                approvals_code: code,
                save_device: true,
                lsd
              }
              http
                .post(pageURL + 'security/twofactor/reauth/enter/', ctx.jar, form, null, null, { Referer })
                .then(function (res) {
                  console.log(res.body);
                  try {
                    var res = JSON.parse(res.body.split(';').pop());
                  } catch (e) {
                    return;
                  }
                  if (res.payload.codeConfirmed == false) 
                    throw {
                      error: 'submitCode',
                      lerror: res.payload.message,
                      continue: submitCode
                    }
                  else if (!res.payload.codeConfirmed)
                    throw res;
                  return;
                })
                .then(utils.createAccess_token(ctx.jar, ctx.globalOptions))
                .then(function ([html, token]) {
                  if (token == 'NONE') 
                    throw {
                      error: 'tokenUndefined',
                      htmlData: html
                    }
                    ctx.access_token = token;
                  return pCb(null, token);
                })
                .catch(function (err) {
                  log.error('getAccess', err);
                  return pCb(err);
                });
            
              return prtPromise;
            }
          }
        })
        .catch(function (err) {
          log.error('getAccess', err.error || err);
          return cb(err);
        });
    }

    return rtPromise;
  }
}